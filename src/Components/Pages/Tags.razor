@page "/Tags/{tagName}"
@page "/Tags"
@using Zodoc.Components.Blog
@using BlazorStatic
@using BlazorStatic.Services
@using System.Net
@using System.Text.Encodings.Web
@inject BlogService<FrontMatterZodoc> BlogService

@if (TagName == null)
{
    <div class="flex flex-wrap justify-between gap-1">
        @{
            var tagsWithCount = BlogService.BlogPosts
                .SelectMany(x => x.FrontMatter.Tags)
                .GroupBy(x => x)
                .Select(group => new { Tag = group.Key, Count = group.Count() })
                .OrderByDescending(x => x.Count);

            foreach (var tag in tagsWithCount)
            {
                <a class="text-primary-500 hover:text-primary-400 mr-3 text-sm font-medium uppercase" href="@BlogService.Options.TagsPageUrl/@WebUtility.HtmlEncode(tag.Tag)">@tag.Tag (@tag.Count)</a>
            }
        }
    </div>

    return;
}

<div class="divide-y divide-gray-700">
    <div class="space-y-2 pb-8 pt-6 md:space-y-5">
        <h1 class="font-sans md:leading-14 text-3xl font-extrabold leading-9 tracking-tight text-gray-100 sm:text-4xl sm:leading-10 md:text-6xl">@WebUtility.UrlDecode(TagName)</h1>
        <p class="text-lg leading-7 text-gray-400">
            Blog posts tagged by
            <span class="text-primary-300">@WebUtility.UrlDecode(TagName)</span>
        </p>
    </div>
    <PostsList Posts="posts"/>
</div>

@code {

    [Parameter] public string? TagName { get; set; }

    List<Post<FrontMatterZodoc>>? posts;

    protected override void OnInitialized()
    {
        if (string.IsNullOrWhiteSpace(TagName)) return;
        
        posts = BlogService.BlogPosts.Where(x => x.FrontMatter.Tags.Contains(WebUtility.UrlDecode(TagName))).ToList();
    }

}